{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOE747su80M1Seoc2ubLLp6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Saadi787/PYTHON-LAB-2-SP22-BAI-029/blob/main/Untitled0.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NNBEWu6-odqZ",
        "outputId": "745dabb1-00a5-409f-9ec2-35c37716c71b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter objects of first list....\n"
          ]
        }
      ],
      "source": [
        "myList1=[]\n",
        "print(\"Enter objects of first list....\")\n",
        "for i in range(5):\n",
        "    val=input(\"Entr a value:\")\n",
        "    n=int(val)\n",
        "    myList1.append(n)\n",
        "\n",
        "myList2=[]\n",
        "print(\"Enter objects of second list....\")\n",
        "for i in range(5):\n",
        "    val=input(\"Enter a value:\")\n",
        "    n=int(val)\n",
        "    myList2.append(n)\n",
        "\n",
        "List3=myList1+mylist2;\n",
        "print(List3)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def isPalindrome(word):\n",
        "  temp=word[::-1]\n",
        "  if temp.capitalize()==word.capitalize():\n",
        "     return True\n",
        "  else:\n",
        "    return False\n",
        "\n",
        "print(isPalindrome(\"deed\"))"
      ],
      "metadata": {
        "id": "mIiMxIV6ogWI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for indrow in range (3):\n",
        "  c.append ([])\n",
        "  for indcol in range(3):\n",
        "      c[indrow].append (0)\n",
        "      for indaux in range (3):\n",
        "          c[indrow][indoo] += a[indrow][indaux] * b[indcol][indaux]\n",
        "print (c)"
      ],
      "metadata": {
        "id": "pZUu1vrDomDI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def perimeter(listing):\n",
        "  len=len(listing)\n",
        "  perimeter=0;\n",
        "  for i in range(0,len-1):\n",
        "      dist = (((listingp[i][0]-listing[i+1][0])**2)+((listing[i][1]-listing[i+1][1])**2))**0.5\n",
        "      perimeter = perimeter + dist\n",
        "  perimeter = perimeter + (((listing[0][0]-listing[leng-1][0])**2)+((listing[0][1]-listing[leng-1][1])**))**0.5\n",
        "  return perimeter\n",
        "\n",
        "L = [(1,3), (2,7), (3,9), (-1,8)]\n",
        "print(perimeter(L))"
      ],
      "metadata": {
        "id": "W8CYWXmxooAW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Function defined\n",
        "def symmDiff(a,b):\n",
        "    e=set()\n",
        "    for i in a:\n",
        "        if i not in b:\n",
        "            e.add(i)\n",
        "    for i in b:\n",
        "         if i not in a:\n",
        "            e.add(i)\n",
        "    return e\n",
        "\n",
        "set1={0,1,2,4,5}\n",
        "set2={4,5,7,8,9}\n",
        "print(symmDiff(set1,set2))\n",
        "\n",
        "#verification using inbuilt function\n",
        "print(set1.symmetric_difference(set2))\n",
        "print(set2.symmetric_difference(set1))\n",
        "print(set1^set2)\n",
        "print(set2^set1)"
      ],
      "metadata": {
        "id": "PrM6lBVgoqVm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sample={(\"sohaib\",\"ali\"):\"0246585468445\", (\"aib\",\"li\"):\"02465854645\",(\"sib\",\"ai\"):\"0246585468445\",}\n",
        "firstName = input(\"enter first name\")\n",
        "lastName = input(\"enter last name\")\n",
        "\n",
        "searchTuple = (firstNme, lastName)\n",
        "if searchTuple in sample:\n",
        "   print(sample[searchTuple])\n",
        "else:\n",
        "   print(\"name not found\")"
      ],
      "metadata": {
        "id": "jYTHFc-wotO-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x=;\n",
        "y==;\n",
        "n1=int(input(\"enter the umber of element\"))\n",
        "for i in range(1,n1+1):\n",
        "  z=int(input(\"enter the elements\"))\n",
        "  x=append(z)\n",
        "n2=int(input(\"enter the number of elements\"))\n",
        "for i in range(1,n2+1):\n",
        "  w=int(input(\"enter the elements\"))\n",
        "  y.append(w)\n",
        "merge_list=x+y\n",
        "print(\"Merge list\",merge_list)\n",
        "merge_list.sort()\n",
        "print(\"sorted list\",merge_list)"
      ],
      "metadata": {
        "id": "ooUHQDHIovUd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x=;\n",
        "y=;\n",
        "n1=int(input(\"enter the number of element\"))\n",
        "fori in range(1,n1+1);\n",
        " z=int(input(\"enter the elements\"))\n",
        " x.append(z)\n",
        "n2=int(input(\"enter the number of element\"))\n",
        "for i in range(1,n2+1):\n",
        "  w=int(input(\"enter the elements\"))\n",
        "  y.append(w)\n",
        "merge_list=x+y\n",
        "print(\"Merge list\",merge_list)\n",
        "merge_list.sort()\n",
        "print(\"sorted list\",merge_list)\n",
        "print(\"smallest number is\",x[0])\n",
        "print(\"Largest number is\",y[-1])"
      ],
      "metadata": {
        "id": "zUCF2imOoxSn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sympy.functions.special.spherical_harmonics import Ynm\n",
        "from sympy.functions import yn\n",
        "from sympy.algebras.quaternion import cos\n",
        "from sympy import sin\n",
        "import math\n",
        "\n",
        "def pii(a):\n",
        "  x=0.001\n",
        "  s=sin(x)\n",
        "  y=cos(x)\n",
        "  s=y\n",
        "  z=y\n",
        "\n",
        "\n",
        "  \n",
        "  \n",
        "print(pii(z))"
      ],
      "metadata": {
        "id": "OO4DSXDoozRG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "birthday_dictionary={\"saad\":\"13/06\",\"hamid\":\"31/07\",\"ahsan\":\"10/10\"}\n",
        "print(\"We knaow the birthdays of\",birthday_dictionary.keys())\n",
        "name=input(\"Who's birthday do you want to look up?\")\n",
        "print(name,\"'s bday is on\",birthday_dictionary[name])"
      ],
      "metadata": {
        "id": "BO4-uip-o1rm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ontact_items =[{'name': ['saad'],\n",
        "                 'age': ['25'],\n",
        "                 \"city\": [\"New york\"],\n",
        "                 'salary': [1000]}]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "[{'name': ['saif'],\n",
        "                 'salary': [1000]}]\n",
        "\n",
        "list1 = ''\n",
        "list2 = ''\n",
        "list3 = []\n",
        "test_dict = {}\n",
        "\n",
        "for item in contact_items:\n",
        "    list1 = item['name']\n",
        "    list2 = item['salary']\n",
        "\n",
        "test_dict = {}\n",
        "\n",
        "for k in list1:\n",
        "    for l in list2:\n",
        "        test_dict['name'] = k\n",
        "        test_dict['salary'] = l\n",
        "        list3.append(test_dict)\n",
        "\n",
        "print(list3)"
      ],
      "metadata": {
        "id": "0uIiuTM6o4BW"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
